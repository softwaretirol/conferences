// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ConsoleApp3.CompiledModels
{
    public partial class ConferenceDbContextModel
    {
        partial void Initialize()
        {
            var conference = ConferenceEntityType.Create(this);
            var session = SessionEntityType.Create(this);
            var sessionReview = SessionReviewEntityType.Create(this);
            var speaker = SpeakerEntityType.Create(this);

            SessionEntityType.CreateForeignKey1(session, conference);
            SessionEntityType.CreateForeignKey2(session, speaker);
            SessionReviewEntityType.CreateForeignKey1(sessionReview, session);

            ConferenceEntityType.CreateAnnotations(conference);
            SessionEntityType.CreateAnnotations(session);
            SessionReviewEntityType.CreateAnnotations(sessionReview);
            SpeakerEntityType.CreateAnnotations(speaker);

            AddAnnotation("ProductVersion", "8.0.6");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var conference = FindEntityType("Conference")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            conference.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var conferenceTableBase = new TableBase("Conference", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", conferenceTableBase);
            conferenceTableBase.Columns.Add("Id", idColumnBase);
            var isDeletedColumnBase = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", conferenceTableBase);
            conferenceTableBase.Columns.Add("IsDeleted", isDeletedColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", conferenceTableBase)
            {
                IsNullable = true
            };
            conferenceTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("Conference", conferenceTableBase);
            var conferenceMappingBase = new TableMappingBase<ColumnMappingBase>(conference, conferenceTableBase, true);
            conferenceTableBase.AddTypeMapping(conferenceMappingBase, false);
            defaultTableMappings.Add(conferenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, conference.FindProperty("Id")!, conferenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase, conference.FindProperty("IsDeleted")!, conferenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, conference.FindProperty("Name")!, conferenceMappingBase);

            var tableMappings = new List<TableMapping>();
            conference.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var conferencesTable = new Table("Conferences", null, relationalModel);
            var idColumn = new Column("Id", "uniqueidentifier", conferencesTable);
            conferencesTable.Columns.Add("Id", idColumn);
            var isDeletedColumn = new Column("IsDeleted", "bit", conferencesTable);
            conferencesTable.Columns.Add("IsDeleted", isDeletedColumn);
            var nameColumn = new Column("Name", "nvarchar(max)", conferencesTable)
            {
                IsNullable = true
            };
            conferencesTable.Columns.Add("Name", nameColumn);
            var pK_Conferences = new UniqueConstraint("PK_Conferences", conferencesTable, new[] { idColumn });
            conferencesTable.PrimaryKey = pK_Conferences;
            var pK_ConferencesUc = RelationalModel.GetKey(this,
                "Conference",
                new[] { "Id" });
            pK_Conferences.MappedKeys.Add(pK_ConferencesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ConferencesUc).Add(pK_Conferences);
            conferencesTable.UniqueConstraints.Add("PK_Conferences", pK_Conferences);
            relationalModel.Tables.Add(("Conferences", null), conferencesTable);
            var conferencesTableMapping = new TableMapping(conference, conferencesTable, true);
            conferencesTable.AddTypeMapping(conferencesTableMapping, false);
            tableMappings.Add(conferencesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, conference.FindProperty("Id")!, conferencesTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn, conference.FindProperty("IsDeleted")!, conferencesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, conference.FindProperty("Name")!, conferencesTableMapping);

            var session = FindEntityType("Session")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            session.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var sessionTableBase = new TableBase("Session", null, relationalModel);
            var conferenceIdColumnBase = new ColumnBase<ColumnMappingBase>("ConferenceId", "uniqueidentifier", sessionTableBase);
            sessionTableBase.Columns.Add("ConferenceId", conferenceIdColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", sessionTableBase)
            {
                IsNullable = true
            };
            sessionTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", sessionTableBase);
            sessionTableBase.Columns.Add("Id", idColumnBase0);
            var rowVersionColumnBase = new ColumnBase<ColumnMappingBase>("RowVersion", "rowversion", sessionTableBase)
            {
                IsNullable = true
            };
            sessionTableBase.Columns.Add("RowVersion", rowVersionColumnBase);
            var speakerIdColumnBase = new ColumnBase<ColumnMappingBase>("SpeakerId", "uniqueidentifier", sessionTableBase);
            sessionTableBase.Columns.Add("SpeakerId", speakerIdColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "nvarchar(max)", sessionTableBase)
            {
                IsNullable = true
            };
            sessionTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("Session", sessionTableBase);
            var sessionMappingBase = new TableMappingBase<ColumnMappingBase>(session, sessionTableBase, true);
            sessionTableBase.AddTypeMapping(sessionMappingBase, false);
            defaultTableMappings0.Add(sessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, session.FindProperty("Id")!, sessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)conferenceIdColumnBase, session.FindProperty("ConferenceId")!, sessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, session.FindProperty("Description")!, sessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rowVersionColumnBase, session.FindProperty("RowVersion")!, sessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)speakerIdColumnBase, session.FindProperty("SpeakerId")!, sessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, session.FindProperty("Title")!, sessionMappingBase);

            var tableMappings0 = new List<TableMapping>();
            session.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var sessionsTable = new Table("Sessions", null, relationalModel);
            var idColumn0 = new Column("Id", "uniqueidentifier", sessionsTable);
            sessionsTable.Columns.Add("Id", idColumn0);
            var conferenceIdColumn = new Column("ConferenceId", "uniqueidentifier", sessionsTable);
            sessionsTable.Columns.Add("ConferenceId", conferenceIdColumn);
            var descriptionColumn = new Column("Description", "nvarchar(max)", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("Description", descriptionColumn);
            var rowVersionColumn = new Column("RowVersion", "rowversion", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("RowVersion", rowVersionColumn);
            var speakerIdColumn = new Column("SpeakerId", "uniqueidentifier", sessionsTable);
            sessionsTable.Columns.Add("SpeakerId", speakerIdColumn);
            var titleColumn = new Column("Title", "nvarchar(max)", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("Title", titleColumn);
            var pK_Sessions = new UniqueConstraint("PK_Sessions", sessionsTable, new[] { idColumn0 });
            sessionsTable.PrimaryKey = pK_Sessions;
            var pK_SessionsUc = RelationalModel.GetKey(this,
                "Session",
                new[] { "Id" });
            pK_Sessions.MappedKeys.Add(pK_SessionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SessionsUc).Add(pK_Sessions);
            sessionsTable.UniqueConstraints.Add("PK_Sessions", pK_Sessions);
            var iX_Sessions_ConferenceId = new TableIndex(
            "IX_Sessions_ConferenceId", sessionsTable, new[] { conferenceIdColumn }, false);
            var iX_Sessions_ConferenceIdIx = RelationalModel.GetIndex(this,
                "Session",
                new[] { "ConferenceId" });
            iX_Sessions_ConferenceId.MappedIndexes.Add(iX_Sessions_ConferenceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sessions_ConferenceIdIx).Add(iX_Sessions_ConferenceId);
            sessionsTable.Indexes.Add("IX_Sessions_ConferenceId", iX_Sessions_ConferenceId);
            var iX_Sessions_SpeakerId = new TableIndex(
            "IX_Sessions_SpeakerId", sessionsTable, new[] { speakerIdColumn }, false);
            var iX_Sessions_SpeakerIdIx = RelationalModel.GetIndex(this,
                "Session",
                new[] { "SpeakerId" });
            iX_Sessions_SpeakerId.MappedIndexes.Add(iX_Sessions_SpeakerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sessions_SpeakerIdIx).Add(iX_Sessions_SpeakerId);
            sessionsTable.Indexes.Add("IX_Sessions_SpeakerId", iX_Sessions_SpeakerId);
            relationalModel.Tables.Add(("Sessions", null), sessionsTable);
            var sessionsTableMapping = new TableMapping(session, sessionsTable, true);
            sessionsTable.AddTypeMapping(sessionsTableMapping, false);
            tableMappings0.Add(sessionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, session.FindProperty("Id")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(conferenceIdColumn, session.FindProperty("ConferenceId")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, session.FindProperty("Description")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(rowVersionColumn, session.FindProperty("RowVersion")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(speakerIdColumn, session.FindProperty("SpeakerId")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, session.FindProperty("Title")!, sessionsTableMapping);

            var sessionReview = FindEntityType("SessionReview")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            sessionReview.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var sessionReviewTableBase = new TableBase("SessionReview", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", sessionReviewTableBase);
            sessionReviewTableBase.Columns.Add("Id", idColumnBase1);
            var ratingColumnBase = new ColumnBase<ColumnMappingBase>("Rating", "int", sessionReviewTableBase);
            sessionReviewTableBase.Columns.Add("Rating", ratingColumnBase);
            var sessionIdColumnBase = new ColumnBase<ColumnMappingBase>("SessionId", "uniqueidentifier", sessionReviewTableBase);
            sessionReviewTableBase.Columns.Add("SessionId", sessionIdColumnBase);
            relationalModel.DefaultTables.Add("SessionReview", sessionReviewTableBase);
            var sessionReviewMappingBase = new TableMappingBase<ColumnMappingBase>(sessionReview, sessionReviewTableBase, true);
            sessionReviewTableBase.AddTypeMapping(sessionReviewMappingBase, false);
            defaultTableMappings1.Add(sessionReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, sessionReview.FindProperty("Id")!, sessionReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ratingColumnBase, sessionReview.FindProperty("Rating")!, sessionReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sessionIdColumnBase, sessionReview.FindProperty("SessionId")!, sessionReviewMappingBase);

            var tableMappings1 = new List<TableMapping>();
            sessionReview.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var sessionReviewsTable = new Table("SessionReviews", null, relationalModel);
            var idColumn1 = new Column("Id", "uniqueidentifier", sessionReviewsTable);
            sessionReviewsTable.Columns.Add("Id", idColumn1);
            var ratingColumn = new Column("Rating", "int", sessionReviewsTable);
            sessionReviewsTable.Columns.Add("Rating", ratingColumn);
            var sessionIdColumn = new Column("SessionId", "uniqueidentifier", sessionReviewsTable);
            sessionReviewsTable.Columns.Add("SessionId", sessionIdColumn);
            var pK_SessionReviews = new UniqueConstraint("PK_SessionReviews", sessionReviewsTable, new[] { idColumn1 });
            sessionReviewsTable.PrimaryKey = pK_SessionReviews;
            var pK_SessionReviewsUc = RelationalModel.GetKey(this,
                "SessionReview",
                new[] { "Id" });
            pK_SessionReviews.MappedKeys.Add(pK_SessionReviewsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SessionReviewsUc).Add(pK_SessionReviews);
            sessionReviewsTable.UniqueConstraints.Add("PK_SessionReviews", pK_SessionReviews);
            var iX_SessionReviews_SessionId = new TableIndex(
            "IX_SessionReviews_SessionId", sessionReviewsTable, new[] { sessionIdColumn }, false);
            var iX_SessionReviews_SessionIdIx = RelationalModel.GetIndex(this,
                "SessionReview",
                new[] { "SessionId" });
            iX_SessionReviews_SessionId.MappedIndexes.Add(iX_SessionReviews_SessionIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SessionReviews_SessionIdIx).Add(iX_SessionReviews_SessionId);
            sessionReviewsTable.Indexes.Add("IX_SessionReviews_SessionId", iX_SessionReviews_SessionId);
            relationalModel.Tables.Add(("SessionReviews", null), sessionReviewsTable);
            var sessionReviewsTableMapping = new TableMapping(sessionReview, sessionReviewsTable, true);
            sessionReviewsTable.AddTypeMapping(sessionReviewsTableMapping, false);
            tableMappings1.Add(sessionReviewsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, sessionReview.FindProperty("Id")!, sessionReviewsTableMapping);
            RelationalModel.CreateColumnMapping(ratingColumn, sessionReview.FindProperty("Rating")!, sessionReviewsTableMapping);
            RelationalModel.CreateColumnMapping(sessionIdColumn, sessionReview.FindProperty("SessionId")!, sessionReviewsTableMapping);

            var speaker = FindEntityType("Speaker")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            speaker.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var speakerTableBase = new TableBase("Speaker", null, relationalModel);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", speakerTableBase);
            speakerTableBase.Columns.Add("Id", idColumnBase2);
            var knowHowTagsColumnBase = new ColumnBase<ColumnMappingBase>("KnowHowTags", "nvarchar(max)", speakerTableBase)
            {
                IsNullable = true
            };
            speakerTableBase.Columns.Add("KnowHowTags", knowHowTagsColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", speakerTableBase)
            {
                IsNullable = true
            };
            speakerTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("Speaker", speakerTableBase);
            var speakerMappingBase = new TableMappingBase<ColumnMappingBase>(speaker, speakerTableBase, true);
            speakerTableBase.AddTypeMapping(speakerMappingBase, false);
            defaultTableMappings2.Add(speakerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, speaker.FindProperty("Id")!, speakerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)knowHowTagsColumnBase, speaker.FindProperty("KnowHowTags")!, speakerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, speaker.FindProperty("Name")!, speakerMappingBase);

            var tableMappings2 = new List<TableMapping>();
            speaker.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var speakersTable = new Table("Speakers", null, relationalModel);
            var idColumn2 = new Column("Id", "uniqueidentifier", speakersTable);
            speakersTable.Columns.Add("Id", idColumn2);
            var knowHowTagsColumn = new Column("KnowHowTags", "nvarchar(max)", speakersTable)
            {
                IsNullable = true
            };
            speakersTable.Columns.Add("KnowHowTags", knowHowTagsColumn);
            var nameColumn0 = new Column("Name", "nvarchar(max)", speakersTable)
            {
                IsNullable = true
            };
            speakersTable.Columns.Add("Name", nameColumn0);
            var pK_Speakers = new UniqueConstraint("PK_Speakers", speakersTable, new[] { idColumn2 });
            speakersTable.PrimaryKey = pK_Speakers;
            var pK_SpeakersUc = RelationalModel.GetKey(this,
                "Speaker",
                new[] { "Id" });
            pK_Speakers.MappedKeys.Add(pK_SpeakersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpeakersUc).Add(pK_Speakers);
            speakersTable.UniqueConstraints.Add("PK_Speakers", pK_Speakers);
            relationalModel.Tables.Add(("Speakers", null), speakersTable);
            var speakersTableMapping = new TableMapping(speaker, speakersTable, true);
            speakersTable.AddTypeMapping(speakersTableMapping, false);
            tableMappings2.Add(speakersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, speaker.FindProperty("Id")!, speakersTableMapping);
            RelationalModel.CreateColumnMapping(knowHowTagsColumn, speaker.FindProperty("KnowHowTags")!, speakersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, speaker.FindProperty("Name")!, speakersTableMapping);
            var fK_SessionReviews_Sessions_SessionId = new ForeignKeyConstraint(
                "FK_SessionReviews_Sessions_SessionId", sessionReviewsTable, sessionsTable,
                new[] { sessionIdColumn },
                sessionsTable.FindUniqueConstraint("PK_Sessions")!, ReferentialAction.Cascade);
            var fK_SessionReviews_Sessions_SessionIdFk = RelationalModel.GetForeignKey(this,
                "SessionReview",
                new[] { "SessionId" },
                "Session",
                new[] { "Id" });
            fK_SessionReviews_Sessions_SessionId.MappedForeignKeys.Add(fK_SessionReviews_Sessions_SessionIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SessionReviews_Sessions_SessionIdFk).Add(fK_SessionReviews_Sessions_SessionId);
            sessionReviewsTable.ForeignKeyConstraints.Add(fK_SessionReviews_Sessions_SessionId);
            sessionsTable.ReferencingForeignKeyConstraints.Add(fK_SessionReviews_Sessions_SessionId);
            var fK_Sessions_Conferences_ConferenceId = new ForeignKeyConstraint(
                "FK_Sessions_Conferences_ConferenceId", sessionsTable, conferencesTable,
                new[] { conferenceIdColumn },
                conferencesTable.FindUniqueConstraint("PK_Conferences")!, ReferentialAction.Cascade);
            var fK_Sessions_Conferences_ConferenceIdFk = RelationalModel.GetForeignKey(this,
                "Session",
                new[] { "ConferenceId" },
                "Conference",
                new[] { "Id" });
            fK_Sessions_Conferences_ConferenceId.MappedForeignKeys.Add(fK_Sessions_Conferences_ConferenceIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sessions_Conferences_ConferenceIdFk).Add(fK_Sessions_Conferences_ConferenceId);
            sessionsTable.ForeignKeyConstraints.Add(fK_Sessions_Conferences_ConferenceId);
            conferencesTable.ReferencingForeignKeyConstraints.Add(fK_Sessions_Conferences_ConferenceId);
            var fK_Sessions_Speakers_SpeakerId = new ForeignKeyConstraint(
                "FK_Sessions_Speakers_SpeakerId", sessionsTable, speakersTable,
                new[] { speakerIdColumn },
                speakersTable.FindUniqueConstraint("PK_Speakers")!, ReferentialAction.Cascade);
            var fK_Sessions_Speakers_SpeakerIdFk = RelationalModel.GetForeignKey(this,
                "Session",
                new[] { "SpeakerId" },
                "Speaker",
                new[] { "Id" });
            fK_Sessions_Speakers_SpeakerId.MappedForeignKeys.Add(fK_Sessions_Speakers_SpeakerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sessions_Speakers_SpeakerIdFk).Add(fK_Sessions_Speakers_SpeakerId);
            sessionsTable.ForeignKeyConstraints.Add(fK_Sessions_Speakers_SpeakerId);
            speakersTable.ReferencingForeignKeyConstraints.Add(fK_Sessions_Speakers_SpeakerId);
            return relationalModel.MakeReadOnly();
        }
    }
}
